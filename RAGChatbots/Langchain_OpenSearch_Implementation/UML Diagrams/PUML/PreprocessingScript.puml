@startuml PreprocessingScript
title RAG Preprocessing Script (LangChain + OpenSearch)


actor "EventBridge/S3" as Trigger
database "S3 Bucket" as S3
database "OpenSearch" as OS
entity "Lambda Function" as Lambda
entity "Bedrock Embeddings" as Bedrock
entity "LangChain TextSplitter" as Splitter
entity "BeautifulSoup" as Soup
entity "PDFLoader/TextLoader/WordLoader" as Loader

Trigger --> Lambda : Invoke (event)
Lambda --> S3 : List/Get files (.txt, .pdf, .doc, .docx, ...)
Lambda --> Loader : Load and extract text
Lambda --> OS : Check ETag for file
OS --> Lambda : ETag match? (skip if yes)
Lambda --> Soup : Scrape web pages
Lambda --> Splitter : Chunk text
Lambda --> Bedrock : Generate embeddings
Lambda --> OS : Upsert chunks + vectors

note right of Lambda
- Detect trigger type
- For S3: process .txt, .pdf, .doc, .docx, etc.
- For schedule: scrape web pages
- Use appropriate loader for each file type
- For S3: check ETag in OpenSearch before indexing
- Skip unchanged files, delete old chunks for updated files
- Chunk, embed, upsert (store ETag in metadata)
end note

@enduml